```{r map_cost, fig.width=10, echo=FALSE}
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res <- route_w_rank_res[!duplicated(route_w_rank_res),]
route_w_rank_res <- route_w_rank_res[order(route_w_rank_res$Rank),]
route_w_rank_res[is.na(route_w_rank_res['total_cost']), 'total_cost'] <- NA
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(values=route_w_rank_res$total_cost)
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(values=subset(route_w_rank_res, !is.na(total_cost)))
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(colors = terrain.colors(10))
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(colors = terrain.colors())
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(colors = terrain.colors(2))
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(colours = terrain.colors(2))
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradientn(colours = terrain.colors(2))
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradientn(colours = terrain.colors(10))
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA)
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray') +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 2) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA)
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.5) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 2) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA)
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA)
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1.5) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.5) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5) +
scale_color_discrete(low = "yellow", high = "red", na.value = NA)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5) +
scale_color_discrete()
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1) +
scale_color_discrete()
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5) +
scale_fill_brewer()
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5) +
scale_fill_viridis(discrete = TRUE)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5)
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1.5) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA) +
labs(color='Test')
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1.5) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA) +
labs(color='Total Cost')
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5) +
labs(color='Rank')
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 1.5) +
scale_color_gradient() +
labs(color='Total Cost')
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 2) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA) +
labs(color='Total Cost')
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 2) +
labs(color='Total Cost')
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 10) +
labs(color='Total Cost')
ggplot() +
#geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 10) +
labs(color='Total Cost')
ggplot() +
geom_sf(data = route_w_rank_res, color='darkgray', linewidth=0.25) +
geom_sf(data = subset(route_w_rank_res, !is.na(total_cost)),
aes(color = total_cost),
linewidth = 3) +
scale_color_gradient(low = "yellow", high = "red", na.value = NA) +
labs(color='Total Cost')
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(warn = -1) # Suppress warnings
use_lib <- ifelse(any(grepl("FTOTnetworkEnv", .libPaths())),
.libPaths()[grepl("FTOTnetworkEnv", .libPaths())],
.libPaths()
)
suppressPackageStartupMessages(library(ggplot2, lib.loc = use_lib))
suppressPackageStartupMessages(library(dplyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(tidyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(DT, lib.loc = use_lib))
suppressPackageStartupMessages(library(plotly, lib.loc = use_lib))
suppressPackageStartupMessages(library(knitr, lib.loc = use_lib))
scen_name = strsplit(basename(params$base_scen), '_')[[1]][1]
library(sf) # TODO: Add to install
library(rlist) # TODO: Add to install
library(basemaps)
library(leaflet)
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments')
base_route <- base_route['NET_SOURCE_OID']
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:10,]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
#route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- NA
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#plot(route_w_rank['Rank'])
# Get extent
#extent = st_bbox(route_w_rank)
#ggplot() + basemap_gglayer(extent)
ggplot() +
geom_sf(data = route_w_rank, color='darkgray', linewidth=0.1) +
geom_sf(data = subset(route_w_rank, !is.na(Rank)),
aes(color = factor(Rank)),
linewidth = 1.5) +
labs(color='Rank')
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
epsg3338 <- leaflet::leafletCRS(
crsClass = "L.Proj.CRS",
code = "EPSG:3338",
proj4def =  "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
resolutions = 2^(16:7))
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
addPolylines(data = route_w_rank, color = route_w_rank$Rank)
m
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338))
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
View(route_w_rank)
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338))
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
m <- m %>% addTiles()
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338))
m <- m %>% addTiles()
m <- m %>% addPolylines(data = route_w_rank)
m
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338))
m <- m %>% addTiles()
m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338))
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
m <- leaflet(route_w_rank, options = leafletOptions(crs = 4326)) #epsg3338
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
epsg3338 <- leaflet::leafletCRS(
crsClass = "L.Proj.CRS",
code = "EPSG:4326", #3338
proj4def =  "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
resolutions = 2^(16:7))
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338)) #epsg3338
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
#route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
route_w_rank <- route_w_rank %>% st_transform(crs = 3338)
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338)) #epsg3338
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
epsg3338 <- leaflet::leafletCRS(
crsClass = "L.Proj.CRS",
code = "EPSG:3338",
proj4def =  "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
resolutions = 2^(16:7))
#route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
route_w_rank <- route_w_rank %>% st_transform(crs = 3338)
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338)) #epsg3338
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
%>%
%>%
%>%
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338)) #epsg3338
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
#m <- leaflet(route_w_rank, options = leafletOptions(crs = epsg3338)) #epsg3338
m <- leaflet(route_w_rank)
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
m <- leaflet(route_w_rank)
m <- m %>% addTiles()
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
m <- m %>% addTiles('Esri.WorldImagery')
m
m <- m %>% addTiles('Esri.WorldGrayCanvas')
m
m <- m %>% addProviderTiles('Esri.WorldGrayCanvas')
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m
m <- m %>% addProviderTiles('Esri.WorldImagery')
m <- leaflet(route_w_rank)
m <- m %>% addProviderTiles('Esri.WorldImagery')
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
?addPolylines
m <- m %>% addProviderTiles('Esri.WorldGrayCanvas')
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='lightgray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
m <- leaflet(route_w_rank)
m <- m %>% addProviderTiles('Esri.WorldGrayCanvas')
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='lightred')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='cadetblue')
m
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], opacity=1, color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red')
m
m <- leaflet(route_w_rank)
m <- m %>% addProviderTiles('Esri.WorldGrayCanvas')
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], opacity=1, color='gray')
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, )
m
m <- leaflet(route_w_rank)
m <- m %>% addProviderTiles('Esri.WorldGrayCanvas')
#m <- m %>% addPolylines(data = route_w_rank)
m <- m %>% addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, , size = 0.5)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, size = 0.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, )
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, wdith = 0.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, )
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, width = 0.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, )
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 0.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, )
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 1) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, )
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 1.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, )
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 1.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 2)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 1.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 3)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 1.5) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 5)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 5)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 5, label = 'test')
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 5, label = route_w_rank$Rank)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 5, label = ~route_w_rank$Rank)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",], color='red', opacity = 1, weight = 5, label = route_w_rank[route_w_rank$Rank != "0",]$Rank)
head(route_w_rank)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color='red',
opacity = 1,
weight = 5,
label = paste('Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank))
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color='red',
opacity = 1,
weight = 5,
label = paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'/nRank:', route_w_rank[route_w_rank$Rank != "0",]$Rank))
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color='red',
opacity = 1,
weight = 5,
label = paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'\nRank:', route_w_rank[route_w_rank$Rank != "0",]$Rank))
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color='red',
opacity = 1,
weight = 5,
label = paste(paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID),
paste('Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank),  sep = "<br>"))
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
library(htmltools)
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
leaflet(route_w_rank) %>%
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color='red',
opacity = 1,
weight = 5,
label = HTML(paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank)))
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color='red',
opacity = 1,
weight = 5,
label = HTML(paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank)))
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color='red',
opacity = 1,
weight = 5,
label = ~labels)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
