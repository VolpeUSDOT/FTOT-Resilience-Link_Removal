mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
commodity_name,
variable_value,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
e_v  %>% filter(!is.na(V_rank))
e_v  %>% filter(!is.na(V_rank) %>% select(commodity_name)
e_v  %>% filter(!is.na(V_rank)) %>% select(commodity_name)
?formatRound
edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
if(disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
commodity_name,
#variable_value,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
g1 <- ggplot(res, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge)) +
theme_bw() +
#ggtitle('Scenario Cost by Disruption Step') +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1)
disrupt_root
paste(params$base_scen, disrupt_type, 'disrupt', sep = '_')
base_scen: 'C:\FTOT\scenarios\reference_scenarios\rs7_capacity'
# Wrapper to render Disruption_Results.Rmd
options(warn = -1)
source('Rutil.R')
library(rmarkdown)
args <- commandArgs(trailingOnly = TRUE)
base_scen <- args[1]
disrupt_type <- args[2]
render('Disruption_Results.Rmd',
params = list(
base_scen = base_scen,
disrupt_type = disrupt_type)
)
# Wrapper to render Disruption_Results.Rmd
options(warn = -1)
source('Rutil.R')
library(rmarkdown)
args <- commandArgs(trailingOnly = TRUE)
base_scen <- args[1]
disrupt_type <- args[2]
render('Disruption_Results.Rmd',
params = list(
base_scen = base_scen,
disrupt_type = disrupt_type)
)
params$disrupt_type
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(warn = -1) # Suppress warnings
use_lib <- ifelse(any(grepl("FTOTnetworkEnv", .libPaths())),
.libPaths()[grepl("FTOTnetworkEnv", .libPaths())],
.libPaths()
)
suppressPackageStartupMessages(library(ggplot2, lib.loc = use_lib))
suppressPackageStartupMessages(library(dplyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(tidyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(DT, lib.loc = use_lib))
suppressPackageStartupMessages(library(plotly, lib.loc = use_lib))
suppressPackageStartupMessages(library(knitr, lib.loc = use_lib))
suppressPackageStartupMessages(library(sf, lib.loc = use_lib))
suppressPackageStartupMessages(library(rlist, lib.loc = use_lib))
#suppressPackageStartupMessages(library(basemaps, lib.loc = use_lib))
suppressPackageStartupMessages(library(leaflet, lib.loc = use_lib))
suppressPackageStartupMessages(library(htmltools, lib.loc = use_lib))
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'
} else {
disrupt_type_full = 'Volume'
}
disrupt_root <- paste(params$base_scen, params$disrupt_type, 'disrupt', sep = '_')
res <- read.csv(file.path(disrupt_root, 'Results.csv'))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
# TODO: Check for duplicate edges
hasDuplicates <- any(duplicated(edges$edge_id))
edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
edges$sum_BC
edges$sum_BC
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
edges
edges$sum_BC
edges$sum_BC
edges[order(edges$sum_BC, decreasing = T), ]
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
edges[order(edges$sum_BC, decreasing = T),]
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
# Wrapper to render Disruption_Results.Rmd
options(warn = -1)
source('Rutil.R')
library(rmarkdown)
args <- commandArgs(trailingOnly = TRUE)
base_scen <- args[1]
disrupt_type <- args[2]
render('Disruption_Results.Rmd',
params = list(
base_scen = base_scen,
disrupt_type = disrupt_type)
)
e_bc <- edges %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
if(params$disrupt_type == 'BC'){
#e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
#mutate(BC_rank = order(sum_BC, decreasing = T))
e_bc <- edges %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
head(edges)
edges %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid)
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
datatable(edges  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
datatable(edges  %>% filter(!is.na(BC_rank)) %>%
select(#BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
datatable(edges  %>% #filter(!is.na(BC_rank)) %>%
select(#BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
e_bc <- edges %>% mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(warn = -1) # Suppress warnings
use_lib <- ifelse(any(grepl("FTOTnetworkEnv", .libPaths())),
.libPaths()[grepl("FTOTnetworkEnv", .libPaths())],
.libPaths()
)
suppressPackageStartupMessages(library(ggplot2, lib.loc = use_lib))
suppressPackageStartupMessages(library(dplyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(tidyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(DT, lib.loc = use_lib))
suppressPackageStartupMessages(library(plotly, lib.loc = use_lib))
suppressPackageStartupMessages(library(knitr, lib.loc = use_lib))
suppressPackageStartupMessages(library(sf, lib.loc = use_lib))
suppressPackageStartupMessages(library(rlist, lib.loc = use_lib))
#suppressPackageStartupMessages(library(basemaps, lib.loc = use_lib))
suppressPackageStartupMessages(library(leaflet, lib.loc = use_lib))
suppressPackageStartupMessages(library(htmltools, lib.loc = use_lib))
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'
} else {
disrupt_type_full = 'Volume'
}
disrupt_root <- paste(params$base_scen, params$disrupt_type, 'disrupt', sep = '_')
res <- read.csv(file.path(disrupt_root, 'Results.csv'))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
# TODO: Check for duplicate edges
hasDuplicates <- any(duplicated(edges$edge_id))
order(sum_BC, decreasing = T)
order(edges$sum_BC, decreasing = T)
edges
edges(head)
head(edges)
edges[order(edges$sum_BC, decreasing = T),]
e_bc <- edges[order(edges$sum_BC, decreasing = T),]
e_bc
e_bc
head(e_bc)
e_bc['BC_rank'] <- order(edges$sum_BC, decreasing = T))
order(edges$sum_BC, decreasing = T)
e_bc['BC_rank'] <- order(edges$sum_BC, decreasing = T)
head(e_bc)
if(params$disrupt_type == 'BC'){
#e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
#mutate(BC_rank = order(sum_BC, decreasing = T))
e_bc <- edges[order(edges$sum_BC, decreasing = T),]
e_bc['BC_rank'] <- order(edges$sum_BC, decreasing = T)
#e_bc <- edges %>% mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
edges$sum_BC
?oder
?order
edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(BC_rank))
edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
1:nrow(e_bc)
if(params$disrupt_type == 'BC'){
#e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
#mutate(BC_rank = order(sum_BC, decreasing = T))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
e_bc['BC_rank'] <- 1:nrow(e_bc)
#e_bc <- edges %>% mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
e_bc <- edges[order(sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
edges[order(sum_BC, decreasing = T),]
