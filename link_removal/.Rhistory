domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
pal <- colorNumeric(
palette = "YlGnBu",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
#addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
#addPolylines(#color='red',
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
opacity = 1)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
#addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
#addPolylines(#color='red',
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
opacity = 1)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
#addPolylines(data = route_w_rank[route_w_rank$Rank == "0",], color='gray', opacity=1, weight = 2) %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
opacity = 1)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
opacity = 1)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$total_cost
)
leaflet(route_w_rank_res) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
#addPolylines(data = route_w_rank_res[is.na(route_w_rank_res$total_cost),], color='gray', opacity=1, weight = 2) %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank_res[!is.na(route_w_rank_res$total_cost),],
color= ~pal(total_cost),
opacity = 1,
weight = 5,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = ~route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$total_cost,
title = 'Total Cost')
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$total_cost
)
leaflet(route_w_rank_res) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank_res[!is.na(route_w_rank_res$total_cost),],
color= ~pal(total_cost),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = ~route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$total_cost,
title = 'Total Cost')
---
title: "Disruption Testing"
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
#disrupt_type_full = ""
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
#disrupt_type_full = ""
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
else if {
elseif {
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
elseif {
elseifif(disrupt_type == 'V')()
elseif(disrupt_type == 'V')()
elseif(disrupt_type == 'V'){
else if(disrupt_type == 'V'){
#disrupt_type_full = ""
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
else if(disrupt_type == 'V'){
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
else if(disrupt_type == 'V'){
else {
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
else {
disrupt_type_full = ""
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
else{
disrupt_type_full = ""
if(disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'}
else {
if (params$disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'
} else {
disrupt_type_full = 'Volume'
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(warn = -1) # Suppress warnings
use_lib <- ifelse(any(grepl("FTOTnetworkEnv", .libPaths())),
.libPaths()[grepl("FTOTnetworkEnv", .libPaths())],
.libPaths()
)
suppressPackageStartupMessages(library(ggplot2, lib.loc = use_lib))
suppressPackageStartupMessages(library(dplyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(tidyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(DT, lib.loc = use_lib))
suppressPackageStartupMessages(library(plotly, lib.loc = use_lib))
suppressPackageStartupMessages(library(knitr, lib.loc = use_lib))
suppressPackageStartupMessages(library(sf, lib.loc = use_lib))
suppressPackageStartupMessages(library(rlist, lib.loc = use_lib))
#suppressPackageStartupMessages(library(basemaps, lib.loc = use_lib))
suppressPackageStartupMessages(library(leaflet, lib.loc = use_lib))
suppressPackageStartupMessages(library(htmltools, lib.loc = use_lib))
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'
} else {
disrupt_type_full = 'Volume'
}
disrupt_root = paste(params$base_scen, disrupt_type, 'disrupt', sep = '_')
res = read.csv(file.path(disrupt_root, 'Results.csv'))
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
g1 <- ggplot(res, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge)) +
theme_bw() +
#ggtitle('Scenario Cost by Disruption Step') +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges')
ggplotly(g1)
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments', quiet = TRUE)
base_route <- base_route['NET_SOURCE_OID']
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:10,]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
#route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- NA
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
opacity = 1)
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments', quiet = TRUE)
base_route <- base_route['NET_SOURCE_OID']
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:10,]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
#route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- NA
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
opacity = 1)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res <- route_w_rank_res[!duplicated(route_w_rank_res),]
route_w_rank_res <- route_w_rank_res[order(route_w_rank_res$Rank),]
route_w_rank_res[is.na(route_w_rank_res['total_cost']), 'total_cost'] <- NA
labels <- paste('Net Source OID:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$Rank,
'<br>Scenario Cost:', route_w_rank_res[!is.na(route_w_rank_res$total_cos),]$total_cost) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$total_cost
)
leaflet(route_w_rank_res) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank_res[!is.na(route_w_rank_res$total_cost),],
color= ~pal(total_cost),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = ~route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$total_cost,
title = 'Total Cost')
if(disrupt_type == 'BC'}{
if(disrupt_type == 'BC'){
datatable(e_j  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
V_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
datatable(e_j  %>% filter(!is.na(V_rank)) %>%
select(BC_rank,
V_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
e_j <- full_join(e_bc, e_v)
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
g2_bc
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
e_j <- full_join(e_bc, e_v)
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
g2_bc
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
if(disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
V_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(BC_rank,
V_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
if(disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(BC_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
if(disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
datatable(e_bc  %>% filter(!is.na(BC_rank)) %>%
select(BC_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
datatable(e_v  %>% filter(!is.na(V_rank)) %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(aes(color=BC_rank) size = 3) +
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(aes(color=BC_rank), size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
e_j <- full_join(e_bc, e_v)
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(aes(color=BC_rank), size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
g2_bc
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(aes(color=-BC_rank), size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
g2_bc
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
g2_bc
```{r bc_vol, fig.width=10, eval=background_flows}
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
e_j <- full_join(e_bc, e_v)
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
g2_bc
?asis_output
?knit_print
# NOTE: THIS CELL IS RUN ONLY IF BACKGROUND FLOWS ARE ENABLED
asis_output("## Betweeness Centrality and Background Flows\\n")
knit_print("The scatter plot below shows the relationship between the between centrality and background vehicle flows for links used in the optimal solution of the baseline scenario. Each roadway segment in the optimal solution is represented by a point. This plot appears only for scenarios run with background flows turned on in the FTOT scenario XML file.
")
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
mutate(BC_rank = order(sum_BC, decreasing = T))
e_v <- edges[order(edges$volume, decreasing = T),] %>%
mutate(V_rank = order(volume, decreasing = T))
e_j <- full_join(e_bc, e_v)
g2_bc <- ggplot(e_j, aes(x = volume,
y = sum_BC)) +
geom_point(size = 3) +
labs(x = 'Volume', y='Betweeness Centrality (BC)', color = 'BC Rank') +
theme_bw()
g2_bc
# NOTE: THIS CELL IS RUN ONLY IF BACKGROUND FLOWS ARE ENABLED
## Betweeness Centrality and Background Flows
The scatter plot below shows the relationship between the between centrality and background vehicle flows for links used in the optimal solution of the baseline scenario. Each roadway segment in the optimal solution is represented by a point. This plot appears only for scenarios run with background flows turned on in the FTOT scenario XML file.
## Betweeness Centrality and Background Flows
The scatter plot below shows the relationship between the between centrality and background vehicle flows for links used in the optimal solution of the baseline scenario. Each roadway segment in the optimal solution is represented by a point. This plot appears only for scenarios run with background flows turned on in the FTOT scenario XML file.
## Betweeness Centrality and Background Flows
#The scatter plot below shows the relationship between the between centrality and background vehicle flows for links used in the optimal solution of the baseline scenario. Each roadway segment in the optimal solution is represented by a point. This plot appears only for scenarios run with background flows turned on in the FTOT scenario XML file.
?normal print
?normal_print
cat('## Betweeness Centrality and Background Flows\n\n')
cat('## Betweeness Centrality and Background Flows\n\n')
cat('The scatter plot below shows the relationship between the between centrality and background vehicle flows for links used in the optimal solution of the baseline scenario. Each roadway segment in the optimal solution is represented by a point. This plot appears only for scenarios run with background flows turned on in the FTOT scenario XML file.
')
}
cat('## Betweeness Centrality and Background Flows\n\n')
cat('The scatter plot below shows the relationship between the between centrality and background vehicle flows for links used in the optimal solution of the baseline scenario. Each roadway segment in the optimal solution is represented by a point. This plot appears only for scenarios run with background flows turned on in the FTOT scenario XML file.
')
