suppressPackageStartupMessages(library(leaflet, lib.loc = use_lib))
suppressPackageStartupMessages(library(htmltools, lib.loc = use_lib))
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'V'){
disrupt_type_full = 'Volume'
} else {
disrupt_type_full = 'Betweeness Centrality'
}
disrupt_root <- paste(params$base_scen, params$disrupt_type, 'disrupt', sep = '_')
res <- read.csv(file.path(disrupt_root, 'Results.csv'))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
# Check for duplicate edges
hasDuplicates <- any(duplicated(edges$mode_oid))
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments', quiet = TRUE)
base_route <- base_route['NET_SOURCE_OID']
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:nrow(res),]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 6,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
title = 'Rank',
opacity = 1)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res <- route_w_rank_res[!duplicated(route_w_rank_res),]
route_w_rank_res <- route_w_rank_res[order(route_w_rank_res$Rank),]
route_w_rank_res[is.na(route_w_rank_res['total_cost']), 'total_cost'] <- NA
labels <- paste('Net Source OID:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$Rank,
'<br>Scenario Cost:', route_w_rank_res[!is.na(route_w_rank_res$total_cos),]$total_cost) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$total_cost
)
res <- read.csv(file.path(disrupt_root, 'Results.csv'))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(warn = -1) # Suppress warnings
use_lib <- ifelse(any(grepl("FTOTnetworkEnv", .libPaths())),
.libPaths()[grepl("FTOTnetworkEnv", .libPaths())],
.libPaths()
)
suppressPackageStartupMessages(library(ggplot2, lib.loc = use_lib))
suppressPackageStartupMessages(library(dplyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(tidyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(DT, lib.loc = use_lib))
suppressPackageStartupMessages(library(plotly, lib.loc = use_lib))
suppressPackageStartupMessages(library(knitr, lib.loc = use_lib))
suppressPackageStartupMessages(library(sf, lib.loc = use_lib))
suppressPackageStartupMessages(library(rlist, lib.loc = use_lib))
#suppressPackageStartupMessages(library(basemaps, lib.loc = use_lib))
suppressPackageStartupMessages(library(leaflet, lib.loc = use_lib))
suppressPackageStartupMessages(library(htmltools, lib.loc = use_lib))
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'V'){
disrupt_type_full = 'Volume'
} else {
disrupt_type_full = 'Betweeness Centrality'
}
disrupt_root <- paste(params$base_scen, params$disrupt_type, 'disrupt', sep = '_')
res <- read.csv(file.path(disrupt_root, 'Results.csv'))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
# Check for duplicate edges
hasDuplicates <- any(duplicated(edges$mode_oid))
# NOTE: THIS CELL IS RUN ONLY IF DUPLICATED EDGE IDS ARE FOUND
cat('_Note: This scenario includes "high importance" edges that flow more than one commodity. As a result, multiple disruption scenarios were created and run for the same road edges._
')
if (params$disrupt_type == 'V'){
g1 <- edges %>%
ggplot() +
aes(x = volume, y = variable_value, color=commodity_name, label=edge_id) +
geom_point(size = 2) +
labs(x = 'Freight Volume (AADT)', y='Commodity Flow', color = 'Commodity') +
theme_bw()
} else {
g1 <-  edges %>%
ggplot() +
aes(x = sum_BC, y = variable_value, color=commodity_name, label=edge_id) +
geom_point(size = 2) +
labs(x = 'Betweeness Centrality', y='Commodity Flow', color = 'Commodity') +
theme_bw()
}
ggplotly(g1)
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
g1 <- ggplot(res, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge)) +
theme_bw() +
#ggtitle('Scenario Cost by Disruption Step') +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1)
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments', quiet = TRUE)
base_route <- base_route['NET_SOURCE_OID']
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:nrow(res),]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 6,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
title = 'Rank',
opacity = 1)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res <- route_w_rank_res[!duplicated(route_w_rank_res),]
route_w_rank_res <- route_w_rank_res[order(route_w_rank_res$Rank),]
route_w_rank_res[is.na(route_w_rank_res['total_cost']), 'total_cost'] <- NA
labels <- paste('Net Source OID:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$Rank,
'<br>Scenario Cost:', route_w_rank_res[!is.na(route_w_rank_res$total_cos),]$total_cost) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$total_cost
)
leaflet(route_w_rank_res) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank_res[!is.na(route_w_rank_res$total_cost),],
color= ~pal(total_cost),
opacity = 1,
weight = 6,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = ~route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$total_cost,
title = 'Total Cost',
opacity=1)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res <- route_w_rank_res[!duplicated(route_w_rank_res),]
route_w_rank_res <- route_w_rank_res[order(route_w_rank_res$Rank),]
route_w_rank_res[is.na(route_w_rank_res['total_cost']), 'total_cost'] <- NA
labels <- paste('Net Source OID:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$Rank,
'<br>Scenario Cost:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$total_cost) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$total_cost
)
leaflet(route_w_rank_res) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank_res[!is.na(route_w_rank_res$total_cost),],
color= ~pal(total_cost),
opacity = 1,
weight = 6,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = ~route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$total_cost,
title = 'Total Cost',
opacity=1)
lag(route_w_rank_res$total_cost)
route_w_rank_res$total_cost
lag(route_w_rank_res$total_cost)
route_w_rank_res$cost_change <- route_w_rank_res$total_cost - lag(route_w_rank_res$total_cost)
labels <- paste('Net Source OID:', route_w_rank_res[!is.na(route_w_rank_res$cost_change),]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank_res[!is.na(route_w_rank_res$cost_change),]$Rank,
'<br>Change in Scenario Cost:', route_w_rank_res[!is.na(route_w_rank_res$cost_change),]$cost_change) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$cost_change
)
leaflet(route_w_rank_res) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank_res[!is.na(route_w_rank_res$cost_change),],
color= ~pal(cost_change),
opacity = 1,
weight = 6,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = ~route_w_rank_res[!is.na(route_w_rank_res$cost_change),]$cost_change,
title = 'Change in Cost',
opacity=1)
head(res)
head(edges)
merge(res, edges, by.x = disrupt_step, by.y = Rank)
res$disrupt_step
merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
if (params$disrupt_type == 'V'){
g1 <- edges %>%
ggplot() +
aes(x = volume, y = variable_value, color=commodity_name, label=edge_id) +
geom_point(size = 2) +
labs(x = 'Freight Volume (AADT)', y='Commodity Flow', color = 'Commodity') +
theme_bw()
} else {
g1 <-  edges %>%
ggplot() +
aes(x = sum_BC, y = variable_value, color=commodity_name, label=edge_id) +
geom_point(size = 2) +
labs(x = 'Betweeness Centrality', y='Commodity Flow', color = 'Commodity') +
theme_bw()
}
ggplotly(tooltip = c("label"))
ggplotly(g1)
if (params$disrupt_type == 'V'){
g1 <- edges %>%
ggplot() +
aes(x = volume, y = variable_value, color=commodity_name, label=edge_id) +
geom_point(size = 2) +
labs(x = 'Freight Volume (AADT)', y='Commodity Flow', color = 'Commodity') +
theme_bw()
} else {
g1 <-  edges %>%
ggplot() +
aes(x = sum_BC, y = variable_value, color=commodity_name, label=edge_id) +
geom_point(size = 2) +
labs(x = 'Betweeness Centrality', y='Commodity Flow', color = 'Commodity') +
theme_bw()
}
ggplotly(g1)
?ggplotly
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge)) +
theme_bw() +
#ggtitle('Scenario Cost by Disruption Step') +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("label"))
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge)) +
theme_bw() +
#ggtitle('Scenario Cost by Disruption Step') +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","label"))
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge)) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","label"))
res+edges
res_edges
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge), label=mode_oid) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
res_edges$mode_oid
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge), label=mode_oid) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","color"))
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge, label=mode_oid)) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","color"))
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge, label=mode_oid)) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","color","label"))
ggplotly(g1, tooltip = c("x","y","label","color"))
labels <- paste('Link Removed (Net Source OID):', res_edges$mode_oid) %>%
lapply(htmltools::HTML)
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge, label=labels)) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","label","color"))
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge, label=mode_oid, text=sprintf("letter: %s<br>Letter: %s", mode_oid))) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","label","color"))
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge, label=mode_oid, text=sprintf("letter: %s<br>Letter: %s", mode_oid, mode_oid))) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("x","y","label","color"))
ggplotly(g1, tooltip = c("x","y","label","color","text"))
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge,
text=sprintf("Disruption Step: %s<br>
Total Cost: %s<br>
Edge Removed: %s<br>
Edges in Solution: %s<br>",
disrupt_step, total_cost, mode_oid, nedge))) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("text"))
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge,
text=sprintf("Disruption Step: %s<br>Total Cost: %s<br>Edge Removed: %s<br>Edges in Solution: %s<br>",
disrupt_step, total_cost, mode_oid, nedge))) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("text"))
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
labels <- paste('Link Removed (Net Source OID):', res_edges$mode_oid) %>%
lapply(htmltools::HTML)
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge,
text=sprintf("Disruption Step: %s<br>Total Cost: %s<br>Edge Removed (Mode OID): %s<br>Edges in Solution: %s<br>",
disrupt_step, total_cost, mode_oid, nedge))) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("text"))
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge,
text=sprintf("Disruption Step: %s<br>Total Cost: %s<br>Change in Cost: %s<br>Edge Removed (Mode OID): %s<br>Edges in Solution: %s<br>",
disrupt_step, total_cost, cost_change, mode_oid, nedge))) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
res_edges$cost_change <- res_edges$total_cost - lag(res_edges$total_cost)
labels <- paste('Link Removed (Net Source OID):', res_edges$mode_oid) %>%
lapply(htmltools::HTML)
g1 <- ggplot(res_edges, aes(x = disrupt_step,
y = total_cost)) +
geom_step(size = 2, color = 'grey80') +
geom_point(size = 2, aes(color = nedge,
text=sprintf("Disruption Step: %s<br>Total Cost: %s<br>Change in Cost: %s<br>Edge Removed (Mode OID): %s<br>Edges in Solution: %s<br>",
disrupt_step, total_cost, cost_change, mode_oid, nedge))) +
labs(x = 'Disruption Step', y = 'Scenario Cost', color = '# of Edges') +
theme_bw()
ggplotly(g1, tooltip = c("text"))
# clean up commas
res$total_cost <- as.numeric(sub('\\,', '', res$total_cost))
res_edges <- merge(res, edges, by.x = 'disrupt_step', by.y = 'Rank')
res_edges$cost_change <- res_edges$total_cost - lag(res_edges$total_cost)
head(res_edges)
res %>% head()
edges %>% head()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(warn = -1) # Suppress warnings
use_lib <- ifelse(any(grepl("FTOTnetworkEnv", .libPaths())),
.libPaths()[grepl("FTOTnetworkEnv", .libPaths())],
.libPaths()
)
suppressPackageStartupMessages(library(ggplot2, lib.loc = use_lib))
suppressPackageStartupMessages(library(dplyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(tidyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(DT, lib.loc = use_lib))
suppressPackageStartupMessages(library(plotly, lib.loc = use_lib))
suppressPackageStartupMessages(library(knitr, lib.loc = use_lib))
suppressPackageStartupMessages(library(sf, lib.loc = use_lib))
suppressPackageStartupMessages(library(rlist, lib.loc = use_lib))
#suppressPackageStartupMessages(library(basemaps, lib.loc = use_lib))
suppressPackageStartupMessages(library(leaflet, lib.loc = use_lib))
suppressPackageStartupMessages(library(htmltools, lib.loc = use_lib))
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'V'){
disrupt_type_full = 'Volume'
} else {
disrupt_type_full = 'Betweeness Centrality'
}
disrupt_root <- paste(params$base_scen, params$disrupt_type, 'disrupt', sep = '_')
res <- read.csv(file.path(disrupt_root, 'Results.csv'))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:nrow(res),]
# Check for duplicate edges
hasDuplicates <- any(duplicated(edges$mode_oid))
if (params$disrupt_type == 'V'){
g1 <- edges %>%
ggplot() +
aes(x = volume, y = variable_value, color=commodity_name, label=edge_id) +
geom_point(size = 2) +
labs(x = 'Freight Volume (AADT)', y='Commodity Flow', color = 'Commodity') +
theme_bw()
} else {
g1 <-  edges %>%
ggplot() +
aes(x = sum_BC, y = variable_value, color=commodity_name,
text=sprintf("Mode OID: %s<br>Commodity: %s<br>Flow: %s<br>BC: %s", mode_oid, commodity_name, variable_value, sum_BC)) +
geom_point(size = 2) +
labs(x = 'Betweeness Centrality', y='Commodity Flow', color = 'Commodity') +
theme_bw()
}
ggplotly(g1, tooltip = "text")
if (params$disrupt_type == 'V'){
g1 <- edges %>%
ggplot() +
aes(x = volume, y = variable_value, color=commodity_name,
text=sprintf("Mode OID: %s<br>Commodity: %s<br>Flow: %s<br>Freight Volume: %s", mode_oid, commodity_name, variable_value, volume))) +
if (params$disrupt_type == 'V'){
g1 <- edges %>%
ggplot() +
aes(x = volume, y = variable_value, color=commodity_name,
text=sprintf("Mode OID: %s<br>Commodity: %s<br>Flow: %s<br>Freight Volume: %s", mode_oid, commodity_name, variable_value, volume)) +
geom_point(size = 2) +
labs(x = 'Freight Volume (AADT)', y='Commodity Flow', color = 'Commodity') +
theme_bw()
} else {
g1 <-  edges %>%
ggplot() +
aes(x = sum_BC, y = variable_value, color=commodity_name,
text=sprintf("Mode OID: %s<br>Commodity: %s<br>Flow: %s<br>BC: %s", mode_oid, commodity_name, variable_value, sum_BC)) +
geom_point(size = 2) +
labs(x = 'Betweeness Centrality', y='Commodity Flow', color = 'Commodity') +
theme_bw()
}
ggplotly(g1, tooltip = "text")
if (params$disrupt_type == 'V'){
g1 <- edges %>%
ggplot() +
aes(x = volume, y = variable_value, color=commodity_name,
text=sprintf("Mode OID: %s<br>Commodity: %s<br>Commodity Flow: %s<br>Freight Volume: %s", mode_oid, commodity_name, variable_value, volume)) +
geom_point(size = 2) +
labs(x = 'Freight Volume (AADT)', y='Commodity Flow', color = 'Commodity') +
theme_bw()
} else {
g1 <-  edges %>%
ggplot() +
aes(x = sum_BC, y = variable_value, color=commodity_name,
text=sprintf("Mode OID: %s<br>Commodity: %s<br>Commodity Flow: %s<br>BC: %s", mode_oid, commodity_name, variable_value, sum_BC)) +
geom_point(size = 2) +
labs(x = 'Betweeness Centrality', y='Commodity Flow', color = 'Commodity') +
theme_bw()
}
ggplotly(g1, tooltip = "text")
