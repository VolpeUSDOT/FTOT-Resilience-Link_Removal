caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
head(edges)
e_bc
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
length,
commodity_name,
variable_value,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
e_bc %>% View()
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
length,
commodity_name,
variable_value,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
#          ) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
e_bc <- edges[order(sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f')
e_bc['BC_rank'] <- 1:nrow(e_bc)
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f')
e_bc['BC_rank'] <- 1:nrow(e_bc)
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
#          ) %>% formatRound(4:5, digits = 2)
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10)
) %>% formatRound(4:5, digits = 2)
}
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
}
head(edges)
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate(across(select(sum_BC), sprintf, fmt = '%.2f'))
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate(across(select('sum_BC'), sprintf, fmt = '%.2f'))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC))
#%>%
#mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
}
round(edges$length, 2)
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate('length' = round(length, 2))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate('length' = round(length, 2))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume)) %>%
mutate(across(where(is.numeric), sprintf, fmt = '%.2f'))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
}
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate('length' = round(length, 2))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
edge_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume)) %>%
mutate('length' = round(length, 2))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
edge_id,
commodity_name,
variable_value,
length,
capacity,
volume,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
}
head(edges)
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
if(params$disrupt_type == 'BC'){
e_bc <- edges[order(edges$sum_BC, decreasing = T),] %>%
filter(!is.na(sum_BC)) %>%
mutate('length' = round(length, 2))
e_bc['BC_rank'] <- 1:nrow(e_bc)
datatable(e_bc  %>%
select(BC_rank,
mode_oid,
from_node_id,
to_node_id,
commodity_name,
variable_value,
length,
sum_BC,
mode_oid),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
} else {
e_v <- edges[order(edges$volume, decreasing = T),] %>%
e_v <- edges[order(edges$volume, decreasing = T),] %>%
filter(!is.na(volume)) %>%
mutate('length' = round(length, 2))
e_v['V_rank'] <- 1:nrow(e_v)
datatable(e_v  %>%
select(V_rank,
mode_oid,
from_node_id,
to_node_id,
commodity_name,
variable_value,
length,
capacity,
volume),
caption = paste("Road segments (edges) disrupted in", scen_name),
rownames = F,
filter = 'top',
options = list(dom = "ftp",
pageLength = 10))
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(warn = -1) # Suppress warnings
use_lib <- ifelse(any(grepl("FTOTnetworkEnv", .libPaths())),
.libPaths()[grepl("FTOTnetworkEnv", .libPaths())],
.libPaths()
)
suppressPackageStartupMessages(library(ggplot2, lib.loc = use_lib))
suppressPackageStartupMessages(library(dplyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(tidyr, lib.loc = use_lib))
suppressPackageStartupMessages(library(DT, lib.loc = use_lib))
suppressPackageStartupMessages(library(plotly, lib.loc = use_lib))
suppressPackageStartupMessages(library(knitr, lib.loc = use_lib))
suppressPackageStartupMessages(library(sf, lib.loc = use_lib))
suppressPackageStartupMessages(library(rlist, lib.loc = use_lib))
#suppressPackageStartupMessages(library(basemaps, lib.loc = use_lib))
suppressPackageStartupMessages(library(leaflet, lib.loc = use_lib))
suppressPackageStartupMessages(library(htmltools, lib.loc = use_lib))
scen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'
} else {
disrupt_type_full = 'Volume'
}
disrupt_root <- paste(params$base_scen, params$disrupt_type, 'disrupt', sep = '_')
res <- read.csv(file.path(disrupt_root, 'Results.csv'))
edges <- read.csv(file.path(disrupt_root, 'Edges_to_Remove.csv'))
# TODO: Check for duplicate edges
hasDuplicates <- any(duplicated(edges$mode_oid))
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments', quiet = TRUE)
base_route <- base_route['NET_SOURCE_OID']
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:10,]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
title = 'Importance Rank')
#opacity = 1)
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments', quiet = TRUE)
base_route <- base_route['NET_SOURCE_OID']
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:10,]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
title = 'Importance Rank',
opacity = 1)
# Read in main GDB
base_route = st_read(dsn = file.path(params$base_scen, 'main.gdb'), layer = 'optimized_route_segments', quiet = TRUE)
base_route <- base_route['NET_SOURCE_OID']
edges <- read.csv(file.path(params$base_scen, 'Edges_to_Remove.csv'))
edges['Rank'] = 1:nrow(edges)
edges <- edges[1:10,]
route_w_rank = merge(base_route, edges, by.x='NET_SOURCE_OID', by.y = 'mode_oid', all.x = TRUE)
route_w_rank[is.na(route_w_rank['Rank']), 'Rank'] <- 0
#https://learning.nceas.ucsb.edu/2019-11-RRCourse/spatial-vector-analysis-using-sf.html#visualize-sf-objects-with-leaflet
route_w_rank <- route_w_rank %>% st_transform(crs = 4326)
labels <- paste('Net Source OID:', route_w_rank[route_w_rank$Rank != "0",]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank[route_w_rank$Rank != "0",]$Rank) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank[route_w_rank$Rank != "0",]$Rank,
reverse = TRUE
)
leaflet(route_w_rank) %>%
addProviderTiles('Esri.WorldGrayCanvas') %>%
addPolylines(color='gray', opacity=1, weight = 2) %>%
addPolylines(data = route_w_rank[route_w_rank$Rank != "0",],
color = ~pal(route_w_rank[route_w_rank$Rank != "0",]$Rank),
opacity = 1,
weight = 8,
label = ~labels,
labelOptions = labelOptions(textsize='12px')) %>%
addLegend(pal = pal,
values = route_w_rank[route_w_rank$Rank != "0",]$Rank,
title = 'Importance Rank',
opacity = 1)
route_w_rank_res = merge(route_w_rank, res, by.x='Rank', by.y = 'disrupt_step', all.x = TRUE)
route_w_rank_res <- route_w_rank_res[!duplicated(route_w_rank_res),]
route_w_rank_res <- route_w_rank_res[order(route_w_rank_res$Rank),]
route_w_rank_res[is.na(route_w_rank_res['total_cost']), 'total_cost'] <- NA
labels <- paste('Net Source OID:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$NET_SOURCE_OID,
'<br>Rank:', route_w_rank_res[!is.na(route_w_rank_res$total_cost),]$Rank,
'<br>Scenario Cost:', route_w_rank_res[!is.na(route_w_rank_res$total_cos),]$total_cost) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(
palette = "YlOrRd",
domain = route_w_rank_res$total_cost
)
remove.packages("rmarkdown")
disrupt_root
disrupt_path
params$disrupt_type
cen_name = basename(file.path(params$base_scen))
disrupt_type = params$disrupt_type
if (params$disrupt_type == 'BC'){
disrupt_type_full = 'Betweeness Centrality'
} else {
disrupt_type_full = 'Volume'
}
disrupt_root <- paste(params$base_scen, params$disrupt_type, 'disrupt', sep = '_')
disrupt_root
